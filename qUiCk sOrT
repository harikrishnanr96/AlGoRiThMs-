#quicksort
#divideandconquer
#O(nlog(n))
#worstcase O(n^2)

def quick_sort2(array,low,hi):
  if low < hi:
    p = partition(array,low,hi)
    quick_sort2(array,low,p-1)
    quick_sort2(array,p+1,hi)

def get_pivot(array,low,hi):
  mid = (hi + low ) // 2
  pivot = hi
  if array[low]<array[mid]:
    if array[mid]<array[hi]:
      pivot = mid
  elif array[low]<array[hi]:
    pivot = low
  return pivot

def partition(array,low,hi):
  pivotindex = get_pivot(array,low,hi)
  pivotvalue = array[pivotindex]
  array[pivotindex],array[low] = array[low],array[pivotindex]
  border = low

  for i in range(low,hi+1):
    if array[i] < pivotvalue:
      border += 1
      array[i],array[border] = array[border],array[i]
  array[low],array[border] = array[border],array[low]

  return border    

array = [5,9,3,10,45,2,0]
quick_sort2(array,0,len(array)-1)
print(array)
